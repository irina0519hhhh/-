/*ЗАДАНИЕ 5
Разместить в динамической памяти 2 массива – 2 матрицы размерностью n на n с элементами типа double (значения n и элементы массивов ввести с консоли). 
А также ввести с консоли знак операции: '+', '-' или '*'. 

//ОТДЕЛЬНЫЙ МОДУЛЬ// 
Написать функцию, вычисляющую сумму, разность или произведение данных матриц (их передать по указателю) и воз-вращающую указатель на массив-результат. 
Разместить эту функцию в отдельном мо-дуле (отличном от того, где располагается функция main()). 
Выдать на консоль значе-ния полученного вектора.*/


#include <stdio.h>
#include <stdlib.h>
#include <math.h>


int main()
{
    int n;
    char sign;
    int i, j, k, t, m;
    double **sum, **min, **pr, **mass1, **mass2, **result, **result1, **result2, **result3;
    printf("Enter n: ");
    scanf("%d", &n);

   //выделяем память для матрицы 1 
    mass1 = (double**)malloc(n*sizeof(double*));
    for(i = 0; i < n; i++)
    {
        mass1[i] = (double*)malloc(n*sizeof(double));
    }

    //выделяем память  для матрицы 2 
     mass2 = (double**)malloc(n*sizeof(double*));
     for(i = 0; i < n; i++)
        {
            mass2[i] = (double*)malloc(n*sizeof(double));
        }    




            for (i = 0; i < n; i++)
                for(j = 0; i < n; i++)
                {
                    printf("mass1[%d][%d]", i+1, j+1);
                    scanf("%lf", &mass1[i][j]);
                }
                for (k = 0; k < n; k++)
                    for(t = 0; t < n; t++)
                    {
                        printf("mass2[%d][%d]", k+1, t+1);
                        scanf("%lf", &mass2[k][t]);
                    }
                        printf("Enter '+', '-' or '*'");
                        scanf("%s", &sign);
                        if (sign == '+')
                        {  
                            result1 = mass_sum(double **mass1, double **mass2, int n, int m); 
                          #include <stdio.h>
#include <stdlib.h>
#include <math.h>

int main()
{
    int n;
    char sign; 
	int i, j, k, t, m;
    printf("Enter n: ");
    scanf("%d", &n);
    double **sum, **min, **pr, **mass1, **mass2, **result, **result1, **result2, **result3;
    //выделение памяти под указатели на строки
    mass1 = (double**)malloc(m*sizeof(double*));
    //вывод эл массива
    for(i = 0; i < m; i++)  //цикл по строкам
    {
        //выделение памяти под хранение строк
        mass1[i] = (double*)malloc(n*sizeof(double));
        mass1[n][n];
    }
        mass2 = (double**)malloc(m*sizeof(double*));
        for(i = 0; i < m; i++)
        {
            mass2[i] = (double*)malloc(n*sizeof(double));
            mass2[n][n];
        }    
            for (i = 0; i < n; i++) 
                for(j = 0; i < n; i++) //цикл по столбцам
                {
                    printf("mass1[%d][%d]", i+1, j+1);
                    scanf("%lf", &mass1[i][j]);
                }
                for (k = 0; k < n; k++)
                    for(t = 0; t < n; t++)
                    {
                        printf("mass2[%d][%d]", k+1, t+1);
                        scanf("%lf", &mass2[k][t]);
                    }
                        printf("Enter '+', '-' or '*'");
                        scanf("%s", &sign);
                        if (sign == '+')
                        {  
                            result1 = mass_sum (double **mass1, double **mass2, int n, int m);
                            printf("sum is = %lf\n", print_matr(double **result1 int n, int m)); 
                        }
                         if (sign == '-')
                        {
                            result2 = mass_min(double **mass1, double **mass2, int n, int m); 
                            printf("min is = %lf\n", print_matr(double **result2, int n, int m));
                        }
                         if (sign == '*')
                        {
                            result3 = mass_pr(double **mass1, double **mass2, int n, int m); 
                            printf("pr is = %lf\n", print_matr(double **result3, int n, int m));
                        }
            return 0;
for (int i = 0; i < n; i ++)
{
     free (sum[i]);
     free (min[i]);
     free (pr[i]);
     free (mass1[i]);
     free (mass2[i]);
}
    free (sum);
    free (min); 
    free (pr); 
    free (mass1); 
    free (mass2);
}

