/*ЗАДАНИЕ 5
Разместить в динамической памяти 2 массива – 2 матрицы размерностью n на n с элементами типа double (значения n и элементы массивов ввести с консоли). 
А также ввести с консоли знак операции: '+', '-' или '*'. 

//ОТДЕЛЬНЫЙ МОДУЛЬ// 
Написать функцию, вычисляющую сумму, разность или произведение данных матриц (их передать по указателю) и воз-вращающую указатель на массив-результат. 
Разместить эту функцию в отдельном мо-дуле (отличном от того, где располагается функция main()). 
Выдать на консоль значения полученного вектора.*/


#include <stdio.h>
#include <stdlib.h>
#include <math.h>


int main()
{
    int n;
    char sign;
    int i, j, k, t, m;
    double **sum, **min, **pr, **mass1, **mass2, **result, **result1, **result2, **result3;
    printf("Enter n: ");
    scanf("%d", &n);

   //РІС‹РґРµР»СЏРµРј РїР°РјСЏС‚СЊ РґР»СЏ РјР°С‚СЂРёС†С‹ 1 
    mass1 = (double**)malloc(n*sizeof(double*));
    for(i = 0; i < n; i++)
    {
        mass1[i] = (double*)malloc(n*sizeof(double));
    }

    //РІС‹РґРµР»СЏРµРј РїР°РјСЏС‚СЊ  РґР»СЏ РјР°С‚СЂРёС†С‹ 2 
     mass2 = (double**)malloc(n*sizeof(double*));
     for(i = 0; i < n; i++)
        {
            mass2[i] = (double*)malloc(n*sizeof(double));
        }    

    for (i = 0; i < n; i++){
	for(j = 0; i < n; i++){
	    printf("mass1[%d][%d]", i+1, j+1);
	    scanf("%lf", &mass1[i][j]);
	}
}
	for (k = 0; k < n; k++){
	    for(t = 0; t < n; t++){
		printf("mass2[%d][%d]", k+1, t+1);
		scanf("%lf", &mass2[k][t]);
	    }
}

        //Р·Р°РїРѕР»РЅРµРЅРёРµ РјР°С‚СЂРёС†
        printf("Enter mass1 values: ");
        print_matrix(int n, double **mass1);
        printf("Enter mass2 values: ");
        print_matrix(int n, double **mass2);

		printf("Enter '+', '-' or '*'");
		scanf("%s", &sign);
		if (sign == '+')
		{  
		    mass_sum(n, mass1, mass2); 
            printf (print_matrix(n, result1);
		}
		 if (sign == '-')
		{
		    mass_min(n, mass1, mass2); 
            print_matrix(n, result2);
		}
		 if (sign == '*')
		{
		    mass_pr(n, mass1, mass2); 
            print_matrix(n, result3);
		}
    return 0;
for (int i = 0; i < n; i++)
{
     free (sum[i]);
     free (min[i]);
     free (pr[i]);
     free (mass1[i]);
     free (mass2[i]);
}
    free (sum);
    free (min); 
    free (pr); 
    free (mass1); 
    free (mass2);
}

