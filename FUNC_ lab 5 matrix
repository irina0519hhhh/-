//ОТДЕЛЬНЫЙ МОДУЛЬ// 
Написать функцию, вычисляющую сумму, разность или произведение данных матриц (их передать по указателю) и воз-вращающую указатель на массив-результат. 
Разместить эту функцию в отдельном мо-дуле (отличном от того, где располагается функция main()). 
Выдать на консоль значе-ния полученного вектора.


/* Matrix addition function*/
double** mass_sum(double **mass1, double **mass2, int n) 
{
    double **result1;
    int i, j;
    result1 = (double **)malloc(n * sizeof(double*));
    for (int i = 0; i < n; i++) 
	{
		result1[i] = (double *)malloc(n * sizeof(double));
	}
    for (int i = 0; i < n; i++){
        for (int j = 0; j < n; j++){
        result1[i][j] = mass1[i][j] + mass2[i][j];
        }
    }
return result1;
}

/* Matrix subtraction func */
double **mass_min(double **mass1, double **mass2, int n) 
{
    double **result2;
    int i, j;
    result2 = (double **)malloc(n * sizeof(double *));
    for ( i = 0; i < n; i++) 
    {
        result2[i] = (double *)malloc(n * sizeof(double));
    }
    for ( i = 0; i < n; i++) 
        for (int j = 0; j < n; j++) 
    {
        result2[i][j] = mass1[i][j] - mass2[i][j];
    }
    return result2;
}

/* Matrix multiplication  func */
double **mass_pr(double **mass1, double **mass2, int n) 
{
    double **result3;
    int i, j;
    result3 = (double **)malloc(n * sizeof(double));
    for ( i = 0; i < n; i++) 
    {
        result3[i] = (double *)malloc(n * sizeof(double));
    }
    for ( i = 0; i < n; i++) 
        for ( j = 0; j < n; j++) 
    {
        result3[i][j] += mass1[i][j] * mass2[i][j];
    }
    return result3;
}


/* PRINT MATRIX CALL*/
void print_matrix(int n, double** matrix)
{
    int i, j;
	for ( i = 0; i < n; i++){
		for ( j = 0; j < n; j++){
			printf(" %lf", matrix[i][j]);
    	}
	    printf("\n");
    }
}


//высвоб памяти
void free_matrix(double** matrix)
{
    int i, n;
    for (i = 0; i < n; i++)
    {

        free (matrix[i]);
    }
    free (matrix);
}
